{"version":3,"sources":["assets/defaultposter.png","services/CommonTypes.ts","pages/Home.tsx","components/MovieTable.tsx","services/MovieService.ts","redux/actions/MovieActionCreate.ts","pages/movie/MovieList.tsx","components/ImgUploader.tsx","components/MovieForm.tsx","pages/movie/AddMovie.tsx","pages/movie/EditMovie.tsx","pages/Layout.tsx","redux/reducers/MovieReducer.ts","redux/reducers/RootReducer.ts","redux/store.ts","App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","SwitchEnum","Home","react_default","a","createElement","Component","MovieTable","this","props","onLoad","_this","style","padding","input","width","marginBottom","display","value","condition","key","onChange","e","onKeyChange","target","onPressEnter","onSearch","es_button","type","icon","size","marginRight","onClick","_this2","title","dataIndex","render","test","className","src","alt","defaultposter","filterDropdown","getFilterName","bind","filterIcon","SearchOutlined","translate","text","join","isHot","record","es_switch","checked","newVal","onSwitchChange","_id","isComing","isClasic","react_router_dom","to","popconfirm","onConfirm","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","onDeleteMovie","message","success","stop","okText","cancelText","danger","total","current","page","pageSize","limit","pagination","console","log","onPageChange","columns","getColumns","config_provider","locale","zhCN","table","rowKey","dataSource","data","getPageConfig","handleChange","loading","isLoading","MovieService","classCallCheck","createClass","_add","movie","_yield$axios$post","axios","post","sent","abrupt","_x","apply","arguments","_update","_callee2","id","_yield$axios$put","_context2","put","concat","_x2","_x3","_delete2","_callee3","_yield$axios$delete","_context3","delete","_x4","_getMovieById","_callee4","_yield$axios$get","_context4","get","_x5","_getMovieByKeyPage","_callee5","_yield$axios$get2","_context5","params","_x6","setMoviesAction","aMovies","payload","movies","setLoadingAction","setConditionAction","deleteMovieAction","movieChangeSwitch","newVale","MovieActionCreate","fetchMovies","_ref2","dispatch","getState","resp","getMovieByKeyPage","deleteMovie","_ref3","updateMovieSwitch","_ref","update","defineProperty","MovieTableContainer","connect","state","val","hoc","ImgUploader","showModal","formData","FormData","append","filename","file","request","Request","action","method","body","fetch","then","json","err","error","setState","imgUrl","uid","name","url","uploadButton","LoadingOutlined","PlusOutlined","marginTop","upload","listType","accept","customRequest","handleRequest","onRemove","handleRemove","onPreview","handlePreview","fileList","getFileList","modal","visible","footer","onCancel","MovieForm","_React$Component","inherits","_super","MovieForm_createSuper","_len","length","args","Array","_key","call","formRef","React","createRef","onReset","resetFields","validateMessages","required","areasOptions","label","typesOptions","getMovieInfo","_getMovieInfo","res","getMovieById","setFieldsValue","newUrl","_handleFinish","values","history","goBack","add","form","es_form","ref","labelCol","span","offset","wrapperCol","requiredMark","scrollToFirstError","onFinish","handleFinish","Item","hasFeedback","htmlFor","rules","valuePropName","ImgUploader_ImgUploader","handleImgUrlChange","es_checkbox","Group","options","pattern","addonAfter","TextArea_default","placeholder","allowClear","htmlType","withRouter","components_MovieForm","match","Header","Layout","Sider","Content","_Layout","path","location","pathname","_useState","useState","lastClickKey","slicedToArray","layout","menu","defaultSelectedKeys","mode","theme","react_router","exact","component","MovieList","AddMovie","EditMovie","defaultState","totalPage","saveMovie","_action$payload","objectSpread","Math","ceil","setCondition","newstate","filter","m","setLoading","changeSwitch","find","newMovie","newData","map","combineReducers","undefined","store","applyMiddleware","thunk","logger","createStore","rootReducer","App","es","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e05fb58d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/defaultposter.b4e877ba.png\";","\r\n// 服务器返回结果：error\r\nexport interface IResponseError {\r\n    err:string,\r\n    data:null,\r\n}\r\n// 服务器返回结果：data 1个\r\nexport interface IResponseData<T> {\r\n    err:string,\r\n    data:T,\r\n}\r\n// 服务器返回结果：分页数据 多个\r\nexport interface IResponsePageData<T> {\r\n    err:string,\r\n    total:number,\r\n    data:T[],\r\n}\r\n// 查询条件 类型约束\r\nexport interface ISearchCondition {\r\n    page?:number\r\n    limit?:number\r\n    key?:string\r\n}\r\n\r\nexport enum SwitchEnum {\r\n    isHot = 'isHot',\r\n    isComing = 'isComing',\r\n    isClasic = 'isClasic',\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class Home extends Component {\r\n    render() {\r\n        return (\r\n            <h1>\r\n                欢迎使用电影管理系统\r\n            </h1>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { IMovieState } from '../redux/reducers/MovieReducer';\r\nimport { Table, Switch, Button, Input, Popconfirm, message, ConfigProvider } from 'antd';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { ColumnsType, TablePaginationConfig, } from 'antd/lib/table';\r\nimport { IMovie } from '../services/MovieService';\r\nimport defaultposter from '../assets/defaultposter.png'\r\nimport { SwitchEnum } from '../services/CommonTypes';\r\nimport { NavLink } from 'react-router-dom';\r\nimport zhCN from 'antd/lib/locale/zh_CN';\r\n\r\n\r\n// 事件接口\r\nexport interface IMovieStateEvent {\r\n    onLoad: () => void;\r\n    onSwitchChange: (type: SwitchEnum, newState: boolean, id: string) => void;\r\n    onDeleteMovie: (id: string) => void;\r\n    onKeyChange: (val: string) => void;\r\n    onSearch: () => void;\r\n    onPageChange: (page: number,size:number) => void;\r\n}\r\n\r\nexport default class MovieTable extends Component<IMovieState & IMovieStateEvent> {  // 交叉类型 this.props 类型 IMovieState\r\n\r\n    componentDidMount() {\r\n        // 组件加载后\r\n        if (this.props.onLoad) {\r\n            this.props.onLoad();\r\n        }\r\n    }\r\n\r\n\r\n    private getFilterName(p: any) {\r\n        return (\r\n            <div style={{ padding: 8 }}>\r\n                <Input\r\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n                    value={this.props.condition.key}\r\n                    onChange={e => this.props.onKeyChange(e.target.value)}\r\n                    onPressEnter={this.props.onSearch}\r\n                />\r\n                <Button\r\n                    type=\"primary\"\r\n                    icon=\"search\"\r\n                    size=\"small\"\r\n                    style={{ width: 90, marginRight: 8 }}\r\n                    onClick={this.props.onSearch}\r\n                >\r\n                    搜索\r\n                </Button>\r\n                <Button\r\n                    size=\"small\"\r\n                    style={{ width: 90 }}\r\n                    onClick={() => {\r\n                        this.props.onKeyChange(\"\")\r\n                        this.props.onSearch();\r\n                    }}\r\n                >\r\n                    重置\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getColumns(): ColumnsType<IMovie> {\r\n        return [\r\n            {\r\n                title: '图片',\r\n                dataIndex: 'poster',\r\n                render: (test) => {  // 重整  显示内容\r\n                    if (test) {\r\n                        return (\r\n                            <img className=\"table-poster\" src={test} alt=\"\" />\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <img className=\"table-poster\" src={defaultposter} alt=\"\" />\r\n                        )\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                title: '名称',\r\n                dataIndex: 'name',\r\n                filterDropdown: this.getFilterName.bind(this),  // 返回渲染内容\r\n                filterIcon: <SearchOutlined translate='' />,\r\n            },\r\n            {\r\n                title: '地区',\r\n                dataIndex: 'areas',\r\n                render: (text: string[]) => { // text:属性值 ['大陆','香港'] record：整个对象\r\n                    return text.join(',')  // 大陆,香港\r\n                }\r\n            },\r\n            {\r\n                title: '类型',\r\n                dataIndex: 'types',\r\n                render: (text: string[]) => { // text:属性值 ['武打','爱情'] record：整个对象\r\n                    return text.join(',')  // 武打,爱情\r\n                }\r\n            },\r\n            {\r\n                title: '时长',\r\n                dataIndex: 'timeLong',\r\n                render: (text: number) => {\r\n                    return text + '分钟'\r\n                }\r\n            },\r\n            {\r\n                title: '正在热映',\r\n                dataIndex: 'isHot',\r\n                render: (isHot, record) => {  // 得是箭头函数  要用this的话\r\n                    return <Switch checked={isHot} onChange={(newVal) => {\r\n                        this.props.onSwitchChange(SwitchEnum.isHot, newVal, record._id!)  // !:去掉undefined类型\r\n                    }} />\r\n                }\r\n            },\r\n            {\r\n                title: '即将上映',\r\n                dataIndex: 'isComing',\r\n                render: (isComing, record) => {  // 得是箭头函数  要用this的话\r\n                    return <Switch checked={isComing} onChange={(newVal) => {\r\n                        this.props.onSwitchChange(SwitchEnum.isComing, newVal, record._id!)  // !:去掉undefined类型\r\n                    }} />\r\n                }\r\n            },\r\n            {\r\n                title: '经典影片',\r\n                dataIndex: 'isClasic',\r\n                render: (isClasic, record) => {  // 得是箭头函数  要用this的话\r\n                    return <Switch checked={isClasic} onChange={(newVal) => {\r\n                        this.props.onSwitchChange(SwitchEnum.isClasic, newVal, record._id!)  // !:去掉undefined类型\r\n                    }} />\r\n                }\r\n            },\r\n            {\r\n                title: '操作',\r\n                dataIndex: '_id',\r\n                render: (text, record) => {  // 得是箭头函数  要用this的话\r\n                    return (\r\n                        <div>\r\n                            <NavLink to={\"/movie/edit/\" + text} >\r\n                                <Button size=\"small\" type=\"primary\" >编辑</Button>\r\n                            </ NavLink>\r\n                            \r\n                            <Popconfirm\r\n                                title=\"确认删除吗?\"\r\n                                onConfirm={async () => {\r\n                                    this.props.onDeleteMovie(text);\r\n                                    message.success('删除成功');\r\n                                }}\r\n                                okText=\"确定\"\r\n                                cancelText=\"取消\"\r\n                            >\r\n                                <Button danger size=\"small\" type=\"default\" >删除</Button>\r\n                            </Popconfirm>\r\n                        </div >\r\n                    )\r\n                }\r\n            },\r\n        ]\r\n    }\r\n\r\n    /**\r\n     * 分页需要的数据对象\r\n     */\r\n    getPageConfig(): false | TablePaginationConfig | undefined {\r\n        if (this.props.total === 0) {\r\n            return false;\r\n        }\r\n        return {\r\n            current: this.props.condition.page,\r\n            pageSize: this.props.condition.limit,\r\n            total: this.props.total,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 这里只处理分页触发\r\n     * 分页、排序、筛选变化时触发\r\n     * @param pagination \r\n     */\r\n    handleChange(pagination: TablePaginationConfig) {\r\n        console.log(pagination); // {current: 21, pageSize: 10, total: 201}\r\n        this.props.onPageChange(pagination.current!,pagination.pageSize!);  // !表示非空   传过去的值排除undefined\r\n    }\r\n\r\n    render() {\r\n        const columns = this.getColumns();\r\n        return (\r\n            <ConfigProvider\r\n                locale={zhCN}\r\n            >\r\n                <Table\r\n                    rowKey='_id'   // rowKey 每行key值 电影对象里的_id属性\r\n                    dataSource={this.props.data}   // 数据里的电影数组\r\n                    columns={columns}          // 设置每列显示内容\r\n                    pagination={this.getPageConfig()}\r\n                    onChange={this.handleChange.bind(this)} // 分页、排序、筛选变化时触发\r\n                    loading={this.props.isLoading}\r\n                ></Table>\r\n            </ConfigProvider >\r\n        )\r\n    }\r\n}\r\n            //注意Table类型规定不能有children Table间不能有空格\r\n","import axios from 'axios';\r\nimport { ISearchCondition, IResponseData, IResponseError, IResponsePageData } from './CommonTypes';\r\n\r\n// 电影对象 约束接口\r\nexport interface IMovie {\r\n    _id?: string,\r\n    name: string,\r\n    types: string[],\r\n    areas: string[],\r\n    timeLong: number,\r\n    isHot?: boolean,\r\n    isComing?: boolean,\r\n    isClasic?: boolean,\r\n    intro?: string, // 简介 可选\r\n    poster?: string, // 海报图 可选 有默认\r\n}\r\n\r\n\r\n// 电影信息 ajax请求\r\nexport class MovieService {\r\n    /**\r\n     * 添加电影\r\n     * @param movie \r\n     */\r\n    static async add(movie: IMovie): Promise<IResponseData<IMovie> | IResponseError> {\r\n        const { data } = await axios.post(\"/api/movie\", movie);\r\n        return data;\r\n    }\r\n    // 服务器返回数据\r\n    //     { data: { … }, status: 200, statusText: \"OK\", headers: { … }, config: { … }, … }\r\n    // config: { transformRequest: { … }, transformResponse: { … }, timeout: 0, xsrfCookieName: \"XSRF-TOKEN\", adapter: ƒ, … }\r\n    // data: { err: \"\", data: { … } }\r\n    // headers: { connection: \"close\", content - length: \"164\", content - type: \"application/json; charset=utf-8\", date: \"Wed, 02 Dec 2020 11:42:49 GMT\", etag: \"W/\"a4 - pL2RZ + qcCyU7QpdsFCCRBSMTg3Y\"\", … }\r\n    // request: XMLHttpRequest { readyState: 4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, onreadystatechange: ƒ, … }\r\n    // status: 200\r\n    // statusText: \"OK\"\r\n    // __proto__: Object\r\n\r\n    /**\r\n     * 修改电影\r\n     * @param id \r\n     * @param movie \r\n     */\r\n    static async update(id: string, movie: Partial<IMovie>): Promise<IResponseData<number> | IResponseError> {\r\n        const { data } = await axios.put(`/api/movie/${id}`, movie);\r\n        return data;\r\n    }\r\n    /**\r\n     * 删除电影\r\n     * @param id \r\n     */\r\n    static async delete(id:string):Promise<IResponseData<true> | IResponseError>{\r\n        const { data } = await axios.delete(`/api/movie/${id}`);\r\n        return data;\r\n    }\r\n    /**\r\n     * 查询电影\r\n     * @param id \r\n     */\r\n    static async getMovieById(id:string):Promise<IResponseData<IMovie | null>>{\r\n        const { data } = await axios.get(`/api/movie/${id}`);\r\n        return data;\r\n    }\r\n    /**\r\n     * 查询电影\r\n     * @param condition 关键字 页码 页容量\r\n     */\r\n    static async getMovieByKeyPage (condition?:ISearchCondition):Promise<IResponsePageData<IMovie> | IResponseError>{\r\n        console.log(condition)\r\n        const { data } = await axios.get(`/api/movie/`,{\r\n            params:condition  // 一般query参数放地址栏后面，axios封装过，放这里，而且名字是params 对应/:id\r\n        });\r\n        return data;\r\n    }\r\n}\r\n\r\n","// action的创建函数  ： 根据数据库的数据  数据操作功能 出发\r\n\r\n\r\nimport { IMovie, MovieService } from \"../../services/MovieService\";\r\nimport { IAction } from './ActionTypes';\r\nimport { ISearchCondition, SwitchEnum } from '../../services/CommonTypes';\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { IRootState } from \"../reducers/RootReducer\";\r\n\r\n// IAction：Action的结构类型， 深入约束返回值内部类型\r\nexport type setMoviesAction = IAction<\"move_save\", { movies: IMovie[], total: number }>\r\n\r\n/**\r\n * Action创建函数：保存电影数组\r\n * @param aMovies \r\n * @param total \r\n */\r\nfunction setMoviesAction(aMovies: IMovie[], total: number): setMoviesAction {\r\n    return {\r\n        type: \"move_save\",  // 操作类型：保存电影\r\n        payload: {          // 附加数据\r\n            movies: aMovies,\r\n            total,\r\n        }\r\n    }\r\n}\r\n\r\n// IAction：Action的结构类型， 深入约束返回值内部类型\r\nexport type setLoadingAction = IAction<\"move_setLoading\", boolean>\r\n\r\n/**\r\n * 设置加载状态\r\n * @param isLoading \r\n */\r\nfunction setLoadingAction(isLoading: boolean): setLoadingAction {\r\n    return {\r\n        type: \"move_setLoading\",\r\n        payload: isLoading,\r\n    }\r\n\r\n}\r\n\r\n// IAction：Action的结构类型， 深入约束返回值内部类型\r\nexport type setConditionAction = IAction<\"move_setCondition\", ISearchCondition>\r\n\r\n/**\r\n * 设置查询条件\r\n * @param condition \r\n */\r\nfunction setConditionAction(condition: ISearchCondition): setConditionAction {\r\n    return {\r\n        type: \"move_setCondition\",\r\n        payload: condition,\r\n    }\r\n}\r\n\r\n// IAction：Action的结构类型， 深入约束返回值内部类型\r\nexport type deleteMovieAction = IAction<\"move_delete\", string>\r\n\r\n/**\r\n * 创建删除电影Action\r\n * @param id \r\n */\r\nfunction deleteMovieAction(id: string): deleteMovieAction {\r\n    return {\r\n        type: \"move_delete\",\r\n        payload: id,\r\n    }\r\n}\r\n\r\nexport type MovieSwitchChange = IAction<\"movie_switch\", {\r\n    type: SwitchEnum,\r\n    newVale: boolean,\r\n    id: string\r\n}>\r\n\r\n/**\r\n * 指导修改 isHot isClassic isComing 属性值\r\n * @param type isHot isClassic isComing\r\n * @param newVale \r\n * @param id \r\n */\r\nfunction movieChangeSwitch(type: SwitchEnum, newVale: boolean, id: string): MovieSwitchChange {\r\n    return {\r\n        type: \"movie_switch\",\r\n        payload: {\r\n            type,\r\n            newVale,\r\n            id\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport type MovieActions = setMoviesAction | setLoadingAction | setConditionAction | deleteMovieAction | MovieSwitchChange;\r\n\r\n// 异步函数由redux-thunk中间件处理\r\n\r\n\r\n\r\n/**\r\n * 改变数据库数据 isHot isClassic isComing\r\n * @param type \r\n * @param newVale \r\n * @param id \r\n */\r\nfunction updateMovieSwitch(type: SwitchEnum, newVale: boolean, id: string)\r\n    : ThunkAction<Promise<void>, IRootState, any, MovieActions> {\r\n    return async (dispatch, getState) => {\r\n        // 设置加载状态\r\n        dispatch(setLoadingAction(true));\r\n        const result = await MovieService.update(id, { [type]: newVale });\r\n        if (result.data) {\r\n            // 修改成功\r\n            dispatch(movieChangeSwitch(type, newVale, id));\r\n        }\r\n        // 设置加载状态\r\n        dispatch(setLoadingAction(false));\r\n    }\r\n}\r\n\r\n/**\r\n * 请求数据，并更新仓库数据\r\n * @param condition \r\n */\r\nfunction fetchMovies(condition: ISearchCondition)\r\n    : ThunkAction<Promise<void>, IRootState, any, MovieActions> {  // 1.函数返回值类型，2 整个仓库类型，3 额外参数 ，4 所有action类型\r\n    return async (dispatch, getState) => {\r\n        // 设置加载状态\r\n        dispatch(setLoadingAction(true));\r\n        // 2设置条件\r\n        dispatch(setConditionAction(condition));\r\n        // 获取数据\r\n        const resp = await MovieService.getMovieByKeyPage(getState().movie.condition)\r\n        // 更改仓库电影数据\r\n        if (resp.data) { // 成功获取数据\r\n            dispatch(setMoviesAction(resp.data, resp.total))\r\n        }\r\n        // 设置加载状态\r\n        dispatch(setLoadingAction(false));\r\n    }\r\n}\r\n\r\n/**\r\n * 异步 删除电影\r\n * @param id \r\n */\r\nfunction deleteMovie(id: string)\r\n    : ThunkAction<Promise<void>, IRootState, any, MovieActions> {\r\n    return async dispatch => {\r\n        // 设置加载状态\r\n        dispatch(setLoadingAction(true));\r\n        // 请求删除一个电影\r\n        const resp = await MovieService.delete(id);\r\n        // 本地仓库删除同一个电影\r\n        if (resp.data) { // 删除成功\r\n            dispatch(deleteMovieAction(id));\r\n        }\r\n        // 设置加载状态\r\n        dispatch(setLoadingAction(false));\r\n    }\r\n}\r\n\r\n\r\nexport default {\r\n    setMoviesAction,\r\n    setLoadingAction,\r\n    setConditionAction,\r\n    deleteMovieAction,\r\n    movieChangeSwitch,\r\n    fetchMovies,\r\n    deleteMovie,\r\n    updateMovieSwitch,\r\n}","import React, { Component, Dispatch } from 'react'\r\nimport MovieTable, { IMovieStateEvent } from '../../components/MovieTable'\r\nimport { connect } from 'react-redux';\r\nimport { IRootState } from '../../redux/reducers/RootReducer';\r\nimport MovieActionCreate from '../../redux/actions/MovieActionCreate';\r\n\r\n// 给组件注入数据   将界面和数据结合\r\nfunction mapStateToProps(state: IRootState) {\r\n    return state.movie;  // 返回movie整个仓库数据\r\n}\r\n// 给组件注入函数(事件)\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): IMovieStateEvent {\r\n    return {\r\n        onLoad() {\r\n            // 触发事件，执行获取电影数据\r\n            dispatch(MovieActionCreate.fetchMovies({  // Dispatch<MovieActions>  MovieActions是对象 而这里是函数（返回对象）会报错 设为Dispatch<any>\r\n                page: 1,\r\n                limit: 10,\r\n                key: '',\r\n            }))\r\n        },\r\n        onSwitchChange(type, newVale, id) {\r\n            dispatch(MovieActionCreate.updateMovieSwitch(type, newVale, id));\r\n        },\r\n        onDeleteMovie(id) {\r\n            dispatch(MovieActionCreate.deleteMovie(id));\r\n        },\r\n        onKeyChange(val) {\r\n            dispatch(MovieActionCreate.setConditionAction({ key: val }))\r\n        },\r\n        onSearch() {\r\n            dispatch(MovieActionCreate.fetchMovies({})); // {} : 之前已经改变过数据库的condition\r\n        },\r\n        onPageChange(page,size) {\r\n            dispatch(MovieActionCreate.fetchMovies({ page ,limit:size}));\r\n        }\r\n    }\r\n}\r\nconst hoc = connect(mapStateToProps, mapDispatchToProps)\r\nconst MovieTableContainer = hoc(MovieTable); // 容器组件：提供数据\r\n\r\nexport default class Home extends Component {\r\n    render() {\r\n        return (\r\n            <h1>\r\n                电影列表页:\r\n                <MovieTableContainer />\r\n            </h1>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Upload, message, Modal } from 'antd'\r\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { UploadFile } from 'antd/lib/upload/interface';\r\nimport { IResponseData, IResponseError } from '../services/CommonTypes';\r\n\r\ninterface IState {\r\n    loading:boolean\r\n    showModal:boolean\r\n}\r\n\r\ninterface IProps {\r\n    imgUrl:string\r\n    onChange(url:string):void\r\n}\r\n\r\nexport default class ImgUploader extends Component< IProps ,IState> {\r\n    state:IState = {\r\n        loading: false,   // 图片是否加载\r\n        showModal:false,\r\n    }\r\n\r\n    /**\r\n     * 文件变化时的处理\r\n     * @param info \r\n     */\r\n    // private handleChange(info: UploadChangeParam<UploadFile<any>>) {\r\n    //     if (info.file.response && this.state.imgUrl !== info.file.response.data) {\r\n    //         // 上传失败提示\r\n    //         if (info.file.response.err) {\r\n    //             message.warning('上传失败')\r\n    //             return;\r\n    //         }\r\n    //         // 上传成功 拿到url\r\n    //         this.setState({\r\n    //             imgUrl: info.file.response.data,\r\n    //             loading:false,\r\n\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // /**\r\n    //  * 上传前的处理\r\n    //  * @param file \r\n    //  * @param FileList \r\n    //  */\r\n    // private beforeUpload(file: RcFile, FileList: RcFile[]) {\r\n    //     console.log(file.size) // 19521   1024 * 1024\r\n    //     if(file.size > 1024 * 1024){\r\n    //         message.warning('上传的图片大小得小于1M')\r\n    //         return false;\r\n    //     }\r\n    //     this.setState({\r\n    //         loading:true,\r\n    //     })\r\n    //     return true;\r\n    // }\r\n\r\n    async handleRequest(p: any) {\r\n        let formData = new FormData();\r\n        formData.append(p.filename, p.file);\r\n        //fetch api\r\n        const request = new Request(p.action, {\r\n            method: \"post\",\r\n            body: formData\r\n        });\r\n        const resp: IResponseData<string> | IResponseError = await fetch(request).then(resp => resp.json());\r\n        if (resp.err) {\r\n            //有错误\r\n            message.error(\"上传失败！\");\r\n        }\r\n        else {\r\n            // //触发回调\r\n            if(this.props.onChange){\r\n                this.props.onChange(resp.data!);\r\n            }\r\n\r\n            this.setState({\r\n                loading:false\r\n            })\r\n        }\r\n    }\r\n\r\n    private getFileList():UploadFile<any>[]{    // 图片显示的是这里的返回数据\r\n        if(this.props.imgUrl){\r\n            return [\r\n                {\r\n                    uid:this.props.imgUrl,\r\n                    name:this.props.imgUrl,\r\n                    url:this.props.imgUrl,\r\n                }\r\n            ]\r\n        }\r\n        return []\r\n    }\r\n\r\n    // 图片预览\r\n    private handlePreview(file: UploadFile<any>){\r\n        // console.log(file)\r\n        this.setState({\r\n            showModal:true\r\n        })\r\n    }\r\n\r\n    private handleRemove(file: UploadFile<any>){\r\n        // console.log(file)\r\n        // true 表示移除\r\n        if(this.props.onChange){\r\n            this.props.onChange('');\r\n        }\r\n        return true\r\n    }\r\n\r\n    render() {\r\n\r\n        const uploadButton = (\r\n            <div>\r\n                {this.state.loading ? <LoadingOutlined translate=\"\" /> : <PlusOutlined translate=\"\" />}\r\n                <div style={{ marginTop: 8 }}>上传图片</div>\r\n            </div>\r\n        );\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"upload-img\">\r\n                <Upload\r\n                    // 发到后台的文件参数名 后端接受的文件名字 \r\n                    name=\"imgfile\"\r\n                    listType=\"picture-card\"\r\n                    className=\"avatar-uploader\"\r\n                    // 不展示文件列表\r\n                    // showUploadList={false}\r\n                    // 上传的地址\r\n                    action=\"/api/upload\"\r\n                    // beforeUpload={this.beforeUpload.bind(this)}\r\n                    // onChange={this.handleChange.bind(this)}   // 被新网络请求代替\r\n                    // 接受的文件类型\r\n                    accept=\".jpg,.png,.gif,.jiff,.bmp\"\r\n                    // 自定义请求头和请求体内容  解决：  ant坑：受控模式下 onchange坑只执行一次\r\n                    customRequest={this.handleRequest.bind(this)}\r\n                    // 移除图片事件\r\n                    onRemove={this.handleRemove.bind(this)}\r\n                    // 预览图片\r\n                    onPreview={this.handlePreview.bind(this)}\r\n                    // 返回显示图片的数据   图片变受控\r\n                    fileList={this.getFileList()}   \r\n                >\r\n                    {this.props.imgUrl ? '' : uploadButton}\r\n                </Upload>\r\n                {/* 预览图片 配合showModal */}\r\n                <Modal visible={this.state.showModal} footer={null} onCancel={() => {\r\n                    this.setState({\r\n                        showModal: false\r\n                    })\r\n                }}>\r\n                    <img alt=\"\" style={{ width: '100%' }} src={this.props.imgUrl} />\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// {action: \"/api/upload\", filename: \"imgfile\", data: {…}, file: File, headers: {…}, …}\r\n// action: \"/api/upload\"\r\n// data: {}\r\n// file: File\r\n// lastModified: 1607661468524\r\n// lastModifiedDate: Fri Dec 11 2020 12:37:48 GMT+0800 (中国标准时间) {}\r\n// name: \"微信截图_20201211123743.png\"\r\n// size: 1191252\r\n// type: \"image/png\"\r\n// uid: \"rc-upload-1607662047833-2\"\r\n// webkitRelativePath: \"\"\r\n// __proto__: File\r\n// filename: \"imgfile\"\r\n// headers: {}\r\n// method: \"post\"\r\n// onError: ƒ onError(err, ret)\r\n// onProgress: ƒ (e)\r\n// onSuccess: ƒ onSuccess(ret, xhr)\r\n// withCredentials: false\r\n// __proto__: Object","\r\nimport { Form, Input, Button, Switch, ConfigProvider, Checkbox, message } from 'antd'\r\n// import { WrappedFormUtils } from \"antd/lib/form/Form\";\r\nimport ImgUploader from './ImgUploader'\r\nimport { MovieService } from '../services/MovieService';\r\nimport { FormInstance } from 'antd/lib/form';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport React from 'react';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { StaticContext } from 'react-router-dom/node_modules/@types/react-router';\r\nimport zhCN from 'antd/lib/locale/zh_CN';  // 设置成中文\r\n\r\ninterface IState {\r\n    imgUrl: string\r\n}\r\n\r\ninterface iProps extends RouteComponentProps<any, StaticContext, unknown> {\r\n    id?: string\r\n}\r\n\r\nconst MovieForm = class extends React.Component<iProps, IState>{\r\n    // form实例\r\n    formRef = React.createRef<FormInstance>();\r\n\r\n    state: IState = {\r\n        imgUrl: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.id) {\r\n            this.getMovieInfo(this.props.id);\r\n        }\r\n    }\r\n\r\n    private async getMovieInfo(id: string) {\r\n        const res = await MovieService.getMovieById(id);\r\n        console.log(res.data)\r\n        if (res.data && this.formRef.current) {\r\n            // 获取数据成功  填入表格\r\n            this.formRef.current.setFieldsValue(res.data);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private handleImgUrlChange(newUrl: string) {\r\n        this.setState({\r\n            imgUrl: newUrl,\r\n        })\r\n\r\n    }\r\n\r\n\r\n    private async handleFinish(values: any) {\r\n        if (this.props.id) {\r\n            const res = await MovieService.update(this.props.id,values)\r\n            if(res.data){\r\n            message.success('修改成功');\r\n            this.props.history.goBack();\r\n        }\r\n            // 修改\r\n            return;\r\n        }\r\n        const res = await MovieService.add(values);\r\n        if (res.data) {\r\n            message.success('提交成功');\r\n            this.onReset()\r\n        }\r\n    }\r\n\r\n    // 表格重置\r\n    private onReset = () => {\r\n        if (this.formRef.current) {\r\n            this.formRef.current.resetFields();\r\n        }\r\n        if (this.state.imgUrl) {\r\n            this.setState({\r\n                imgUrl: ''\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n    validateMessages = {\r\n        required: '${label} 必填',\r\n    }\r\n\r\n    areasOptions = [\r\n        { label: '中国大陆', value: '中国大陆' },\r\n        { label: '香港', value: '香港' },\r\n        { label: '台湾', value: '台湾' },\r\n    ];\r\n\r\n    typesOptions = ['爱情', '武打', '魔幻', '古装', '幽默']\r\n\r\n\r\n    render() {\r\n        return (\r\n            <ConfigProvider\r\n                form={{ validateMessages: this.validateMessages }}\r\n                locale={zhCN}\r\n            >\r\n                <Form\r\n                    ref={this.formRef}\r\n                    // form={form}  函数组件用 form实例\r\n                    name='form-movie'\r\n                    // validateMessages={this.validateMessages}\r\n                    //表格居中 \r\n                    //左侧长度 间隔 \r\n                    labelCol={{ span: 3, offset: 7 }}\r\n                    // 右侧长度\r\n                    wrapperCol={{ span: 7 }}\r\n                    // 是否必填\r\n                    requiredMark={false}\r\n                    // 提交失败自动滚动到第一个错误字段\r\n                    scrollToFirstError={true}\r\n                    size=\"small\"\r\n                    onFinish={this.handleFinish.bind(this)}   // 前提 有name属性\r\n                >\r\n                    <Form.Item\r\n                        label=\"电影名称\"\r\n                        hasFeedback={true}\r\n                        htmlFor=\"name\"\r\n                        name=\"name\"    // name属性很重要 一定要先加 不然其他功能可能就没效果了\r\n                        rules={[    // + name属性才有用\r\n                            { required: true },\r\n                            // { pattern: /\\d{2,3}/, message: '请输入2-3位数字学号' }\r\n                        ]}\r\n                    >\r\n                        <Input id=\"name\" />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"封面图\"\r\n                        name=\"poster\"\r\n                        valuePropName=\"imgUrl\"\r\n                    >\r\n                        <ImgUploader imgUrl={this.state.imgUrl} onChange={this.handleImgUrlChange.bind(this)} />\r\n                        {/* 可以智能地获取到地址 */}\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"地区\"\r\n                        name=\"areas\"\r\n                        rules={[    // + name属性才有用\r\n                            { required: true },\r\n                        ]}\r\n                    >\r\n                        <Checkbox.Group options={this.areasOptions} />\r\n\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"类型\"\r\n                        required={true}\r\n                        name=\"types\"\r\n                        rules={[    // + name属性才有用\r\n                            { required: true },\r\n                        ]}\r\n                    >\r\n                        <Checkbox.Group options={this.typesOptions} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"时长(分钟)\"\r\n                        required={true}\r\n                        name=\"timeLong\"\r\n                        rules={[    // + name属性才有用\r\n                            { required: true },\r\n                            { pattern: /\\d{2,3}/, message: '请输入2-3位数字学号' }\r\n                        ]}\r\n                    >\r\n                        <Input addonAfter=\"分钟\" />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"正在热映\"\r\n                        name=\"isHot\"   // 名字一定要跟后端数据名一致！\r\n                        valuePropName=\"checked\"  // 默认 value\r\n                    >\r\n                        <Switch />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"即将上映\"\r\n                        name=\"isComing\"  // 名字一定要跟后端数据名一致！\r\n                        valuePropName=\"checked\"  // 默认 value\r\n                    >\r\n                        <Switch />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"经典影片\"\r\n                        name=\"isClasic\"  // 名字一定要跟后端数据名一致！\r\n                        valuePropName=\"checked\"  // 默认 value\r\n                    >\r\n                        <Switch />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"描述\"\r\n                        name=\"specification\"\r\n                    >\r\n                        <TextArea placeholder=\"请输入\" allowClear />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        wrapperCol={{ span: 7, offset: 10 }}\r\n                    >\r\n                        <Button          // 不用点击事件 可触发 同 this.formref.current.submit()\r\n                            type=\"primary\"\r\n                            htmlType='submit'\r\n                            size=\"small\"\r\n                            style={{ marginRight: '10px' }}\r\n                        >提交</Button>\r\n                        <Button\r\n                            type=\"default\"\r\n                            htmlType='reset'\r\n                            size=\"small\"\r\n                            onClick={this.onReset}\r\n                        >重置</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </ConfigProvider >\r\n        )\r\n    }\r\n}\r\n\r\n// Form.Item :表单字段组件，用于数据双向绑定、校验、布局等。\r\n\r\nexport default withRouter(MovieForm )","import React, { Component } from 'react'\r\nimport MovieForm from '../../components/MovieForm'\r\n\r\nexport default class Home extends Component {\r\n    render() {\r\n        return (\r\n            <MovieForm ></ MovieForm>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { RouteComponentProps } from 'react-router'; // 官方定义好的类型\r\nimport MovieForm from '../../components/MovieForm';\r\n\r\n\r\ninterface IParams {  // 能提示.id 不飘红\r\n    id: string\r\n}\r\n\r\n\r\nexport default class Home extends Component<RouteComponentProps<IParams>> {\r\n    render() {\r\n        // console.log(this.props); // history location match\r\n        return (\r\n            <MovieForm id={this.props.match.params.id} />\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport { NavLink, Route, RouteProps } from 'react-router-dom';\r\nimport Home from './Home';\r\nimport MovieList from './movie/MovieList';\r\nimport AddMovie from './movie/AddMovie';\r\nimport EditMovie from './movie/EditMovie';\r\nimport { Layout, Menu } from 'antd'\r\nconst { Header, Sider, Content } = Layout;\r\n\r\n\r\nconst _Layout: React.FC = function (props:RouteProps) {\r\n    // console.log(props)  //  history location match\r\n    let path;\r\n    if(props.location){\r\n        path = props.location.pathname\r\n    }\r\n    const [lastClickKey] = useState([path])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Layout>\r\n                <Header className=\"layout_header\">\r\n                    <NavLink to=\"/\"><h1>猫眼电影管理系统</h1></ NavLink>\r\n                </Header>\r\n                <Layout>\r\n                    <Sider>\r\n                        <Menu\r\n                            defaultSelectedKeys={lastClickKey}  // 页面刷新后显示选中的类表\r\n                            mode=\"inline\"\r\n                            theme=\"dark\"\r\n                        >\r\n                            {/* <Menu.Item key=\"1\">\r\n                                <NavLink to=\"/\">首页</ NavLink>\r\n                            </Menu.Item> */}\r\n                            <Menu.Item key=\"/\">\r\n                                <NavLink to=\"/\">首页</ NavLink>\r\n                            </Menu.Item>\r\n                            <Menu.Item key=\"/movie\">\r\n                                <NavLink to=\"/movie\">电影列表</ NavLink>\r\n                            </Menu.Item>\r\n                            <Menu.Item key=\"/movie/add\">\r\n                                <NavLink to=\"/movie/add\">添加电影</ NavLink>\r\n                            </Menu.Item>\r\n                        </Menu>\r\n\r\n                    </Sider>\r\n                    <Content>\r\n                        <div>\r\n                            <Route path='/' exact component={Home}></ Route>\r\n                            <Route path='/movie' exact component={MovieList}></ Route>\r\n                            <Route path='/movie/add' exact component={AddMovie}></ Route>\r\n                            <Route path='/movie/edit/:id' exact component={EditMovie}></ Route>\r\n                        </div>\r\n                    </Content>\r\n                </Layout>\r\n            </Layout>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default _Layout;\r\n\r\n\r\n","// 描述电影列表的状态类型\r\n\r\n// react:\r\n// action:  对数据进行什么操作，附加新的数据\r\n// reducer: 根据action指示，去改变数据\r\n\r\nimport { Reducer } from \"react\";\r\nimport { ISearchCondition } from \"../../services/CommonTypes\";\r\nimport { IMovie } from \"../../services/MovieService\";\r\nimport { deleteMovieAction, MovieActions, MovieSwitchChange, setConditionAction, setLoadingAction, setMoviesAction } from \"../actions/MovieActionCreate\";\r\n\r\n// 原可选类型，生成新的必填类型\r\nexport type IMovieCondition = Required<ISearchCondition>\r\n\r\n// 电影数据库  里面数据类型\r\nexport interface IMovieState {\r\n    /**\r\n     * 电影数组\r\n     */\r\n    data: IMovie[],\r\n    /**\r\n     * 查询条件 必选\r\n     */\r\n    condition: IMovieCondition,\r\n    /**\r\n     *  电影总数\r\n     */\r\n    total: number,\r\n    /**\r\n     * 是否正在加载数据\r\n     */\r\n    isLoading: boolean,\r\n\r\n    /**\r\n     * 总页数\r\n     */\r\n    totalPage: number\r\n}\r\n\r\n// 官方写好的类型\r\n// type Reducer<S, A> = (prevState: S, action: A) => S;\r\n// 提取共同点，生成新的类型，后面可以少写一点\r\ntype MovieReducer<A> = Reducer<IMovieState, A>\r\n\r\n// 默认状态\\数据\r\nconst defaultState: IMovieState = {\r\n    data: [],\r\n    condition: {\r\n        page: 1,\r\n        limit: 10,\r\n        key: '',\r\n    },\r\n    total: 0,\r\n    isLoading: false,\r\n    totalPage: 0,\r\n}\r\n\r\n/**\r\n * 改变数据\r\n * Movie数据库(数据状态)的数据操作函数:   改变状态\r\n * @param state \r\n * @param action \r\n */\r\nexport default function (state: IMovieState = defaultState, action: MovieActions) {\r\n    switch (action.type) {   // 可辨识联合\r\n        case \"move_delete\":\r\n            return deleteMovie(state, action);\r\n        case \"move_save\":\r\n            return saveMovie(state, action); // 更新数据\r\n        case \"move_setCondition\":\r\n            return setCondition(state, action);\r\n        case \"move_setLoading\":\r\n            return setLoading(state, action);\r\n        case \"movie_switch\":\r\n            return changeSwitch(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// function saveMovie(state: IMovieState, action: setMoviesAction):IMovieState {\r\n// }\r\n// 等同如下\r\n// 官方写好的类型\r\n// type Reducer<S, A> = (prevState: S, action: A) => S;\r\n/**\r\n * 设置 电影数组数据\r\n * @param state \r\n * @param action \r\n */\r\nconst saveMovie: MovieReducer<setMoviesAction> = function (state, action) {\r\n    const { movies, total } = action.payload;\r\n    return {\r\n        ...state,\r\n        data: movies,\r\n        total: total,\r\n        totalPage: Math.ceil(total / state.condition.limit),\r\n    }\r\n    // return Object.assign({}, state, {\r\n    //     data:movies,\r\n    //     total:total\r\n    // })\r\n}\r\n\r\n/**\r\n * 修改 查询条件\r\n * @param state 之前的状态\r\n * @param action \r\n */\r\nconst setCondition: MovieReducer<setConditionAction> = function (state, action) {\r\n    const newstate = {\r\n        ...state,\r\n        condition: {\r\n            ...state.condition,\r\n            ...action.payload,\r\n        },\r\n    }\r\n    newstate.totalPage = Math.ceil(newstate.total / newstate.condition.limit);\r\n    return newstate;\r\n}\r\n/**\r\n * 删除电影\r\n * @param state \r\n * @param action \r\n */\r\nconst deleteMovie: MovieReducer<deleteMovieAction> = function (state, action) {\r\n    return {\r\n        ...state,\r\n        data: state.data.filter(m => m._id !== action.payload),\r\n        total: state.total - 1,\r\n        totalPage: Math.ceil((state.total - 1) / state.condition.limit),\r\n    }\r\n}\r\n/**\r\n * 设置是否加载中\r\n * @param state \r\n * @param action \r\n */\r\nconst setLoading: MovieReducer<setLoadingAction> = function (state, action) {\r\n    return {\r\n        ...state,\r\n        isLoading: action.payload,\r\n    }\r\n}\r\n\r\n/**\r\n * 修改 isHot isComing isClassic  作为开关的值\r\n * @param state \r\n * @param action type,newValue,id\r\n */\r\nconst changeSwitch: MovieReducer<MovieSwitchChange> = function (state, action) {\r\n    const p = action.payload;\r\n    // 找出电影对象\r\n    let movie = state.data.find(movie => movie._id === p.id);\r\n    if (!movie) {\r\n        return state;\r\n    }\r\n\r\n    // 克隆对象 修改  不能直接改变找到的movie对象\r\n    const newMovie = { ...movie };\r\n    newMovie[p.type] = p.newVale;\r\n    // 将新对象 放入新data数组\r\n    const newData =  state.data.map(movie => {\r\n        if (movie._id === p.id) {\r\n            return newMovie;\r\n        }\r\n        return movie;\r\n    })\r\n\r\n    return {\r\n        ...state,\r\n        // data:state.data.map(movie=> {\r\n        //     if(movie._id === p.id){\r\n        //         let newMovie = {...movie};\r\n        //         newMovie[p.type] = p.newVale;\r\n        //         return newMovie;\r\n        //     } else {\r\n        //         return movie;\r\n        //     }\r\n        // })\r\n        data: newData\r\n    }\r\n}","// reducers 汇总成一个 总的reducer函数\r\n\r\nimport { combineReducers } from 'redux';\r\nimport movie, { IMovieState } from './MovieReducer'\r\n\r\n// 整个数据库的状态\r\nexport interface IRootState {\r\n    movie:IMovieState,\r\n}\r\n\r\n// export default (state:any = {}, action:MovieActions) =>{\r\n//     const newState = {\r\n//         movieReducer:movieReducer(state.movieReducer,action),\r\n//     }\r\n//     return newState\r\n// }\r\n\r\n// 等同于如下\r\nexport default combineReducers({movie})\r\n\r\n// 仓库数据\r\n// {movie: {…}}\r\n// movie:\r\n// condition: {page: 1, limit: 10, key: \"\"}\r\n// data: []\r\n// isLoading: true\r\n// total: 0\r\n// __proto__: Object\r\n// __proto__: Object\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport rootReducer, { IRootState } from './reducers/RootReducer'\r\nimport logger from 'redux-logger';  // 还要安装 @types/redux-logger\r\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\r\n\r\n// 创建一个仓库\r\n// export const store = createStore(rootReducer,applyMiddleware(logger));\r\nexport const store = applyMiddleware(thunk as ThunkMiddleware<IRootState>,logger)(createStore)(rootReducer); // thunk写前面\r\n\r\n\r\n","import React from 'react';\nimport _Layout from './pages/Layout';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux'\nimport {store} from './redux/store'\n\nconst App:React.FC  = ()=> {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Route path='/' component={_Layout}></Route>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'antd/dist/antd.css'\n\n\n\n\n // 异步函数 由thunk中间件处理\n// (类型问题，飘红) 解决：\n// thunk as ThunkMiddleware<IRootState> 在应用中间件时\n// 2 MovieAction.fetchMovies({page:2}) as any\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}